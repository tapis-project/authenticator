"""empty message

Revision ID: ca442ccae0dd
Revises: acf5fe06e3c5
Create Date: 2023-04-20 15:29:31.465644

"""
from alembic import op
import psycopg2
import sqlalchemy as sa
from tapisservice.config import conf
from tapisservice.logs import get_logger
logger = get_logger(__name__)


# revision identifiers, used by Alembic.
revision = 'ca442ccae0dd'
down_revision = 'acf5fe06e3c5'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    logger.info("Starting ca442ccae0dd upgrade")
    
    # TODO: For some reason, the following line gets stuck and does not return
    #       we are commenting it out for now, but until that gets resolved, the
    #       following must be run directly using psql
    #        alter table tenantconfig add constraint uq_tenantconfig_tenant_id unique (tenant_id);
    # op.create_unique_constraint("uq_tenantconfig_tenant_id", "tenantconfig", ["tenant_id"])

    # This code below can be used to execute the update "by hand" in Python shell using the 
    # sqlalchemy. Note that this code DOES NOT work within the alembic migrations suite because those
    # run in a separate transaction:

    # full_db_url = f'postgresql://{conf.postgres_user}:{conf.postgres_password}@{conf.sql_db_url}'
    # logger.info(f"full_db_url: {full_db_url}")
    # engine = sa.create_engine(full_db_url)
    # # first list all the tables:
    # with engine.connect() as con:
    #     cur = con.execute("select * from pg_catalog.pg_tables where schemaname != 'pg_catalog' AND  schemaname != 'information_schema';")
    #     logger.info(f"Tables: {cur.fetchall()}")
    # try:
    #     with engine.connect() as con:
    #         con.execute("alter table public.tenantconfig add constraint uq_tenantconfig_tenant_id unique (tenant_id)")
    #     logger.info("")
    # except Exception as e:
    #     try:
    #         if type(e.orig) == psycopg2.errors.DuplicateTable:
    #             pass
    #         else:
    #             logger.error(f"Got unexpected exception type trying to add constraint; type(e.orig): {type(e.orig)}; e: {e}")
    #     except Exception as e2:
    #         logger.info("Uniqueness constraint NOT added for tenant_id on TenantConfig. Multiple exceptions:")
    #         logger.info(f"Original exception trying to add constraint: {e}")
    #         logger.ingo(f"Exception trying to check type: {e2}")

    # The following code runs the migration in the existing alembic transaction (which works, in general)
    conn = op.get_bind()
    # first, delete any TenandConfig records with duplicate tenant id's.
    conn.execute("DELETE FROM public.tenantconfig a USING public.tenantconfig b WHERE a.id < b.id AND a.tenant_id = b.tenant_id")

    # next, add the uniqueness constraint to the tenant_id field of the TenantConfig table.
    conn.execute("alter table public.tenantconfig add constraint uq_tenantconfig_tenant_id unique (tenant_id)")
    logger.info("Migration ca442ccae0dd_ exiting without completing.")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_tenantconfig_tenant_id", "tenantconfig")
    # ### end Alembic commands ###
