openapi: "3.0.2"

info:
  title: "Authenticator"
  description: "REST API and web server providing authentication for a Tapis v3 instance."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Authenticator"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/authenticator"

servers:
- url: http://localhost:5000
  description: Local Development

paths:
  /v3/clients:
    get:
      tags:
        - Clients
      operationId: listClients
      parameters:
      - name: limit
        in: query
        description: limit the number of clients returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfClients'
    post:
      tags:
        - Cients
      operationId: createClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewClient'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Client'

  /v3/clients/{client_id}:
    get:
      tags:
      - Clients
      summary: Get client details
      description: Get details of a specific client by its id.
      operationId: getClient
      parameters:
      - name: client_id
        in: path
        description: Unique ID of the client
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Client'
    delete:
      tags:
      - Clients
      summary: Delete a tenant
      description: Permenantly delete a client.
      operationId: deleteClient
      parameters:
      - name: client_id
        in: path
        description: Unique ID of the client
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


  /v3/oauth2/tokens:
    post:
      tags:
        - Tokens
      operationId: createToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewToken'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Token'


components:
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, failure]

    NewClient:
      type: object
      properties:
        client_id:
          type: string
          description: A unique identifier for the client. Must be unique for the tenant.
        client_key:
          type: string
          description: A secret key for authenticating the client.
        callback_url:
          type: string
          description: URL for application to receive OAuth callbacks for executing flows such as authorization_code.

    NewToken:
      type: object
      properties:
        client_id:
          type: string
          description: A unique identifier for the client. Must be unique for the tenant.
        client_secret:
          type: string
          description: A secret key for authenticating the client.
        username:
          type: string
          description: A valid username
        password:
          type: string
          description: A corresponding password for the username given.

    Client:
      type: object
      properties:
        client_id:
          type: string
          description: A unique identifier for the client. Must be unique for the tenant.
        client_key:
          type: string
          description: A secret key for authenticating the client.
        callback_url:
          type: string
          description: URL for application to receive OAuth callbacks for executing flows such as authorization_code.
        create_time:
          type: string
          description: The time the client was created.
        last_update_time:
          type: string
          description: The time the client was last updated.

    Token:
      type: object
      properties:
        token:
          type: string
          description: A jwt token.


    arrayOfClients:
      type: array
      items:
        $ref: '#/components/schemas/Client'
